<!DOCTYPE html>
<html lang="en">

<head>
  <!--#include file="inc_header.html"-->
  <script>
    $(function () {
      initErc();
      console.log('init dapp ok.');
    });

    function initErc() {
      window.vm = new Vue({
        el: '#app',
        data: {
          submitting: false,
          error: '',
          chains: window.chains,
          bridgeConfigs: [
            {
              token: 'PLUT',
              fee: [10, 20, 20000],
              decimals: 18,
              chainIds: [4, 42, 97, 256],
              tokens: ['0x5f87f75bd9e3c2611a12932ac57739f3d90d10fe', '0x5f87f75bd9e3c2611a12932ac57739f3d90d10fe', '0x5f87f75bd9e3c2611a12932ac57739f3d90d10fe', '0x5f87f75bd9e3c2611a12932ac57739f3d90d10fe']
            },
            {
              token: 'HOOK',
              fee: [10, 20, 20000],
              decimals: 18,
              chainIds: [4, 42, 97],
              tokens: ['0xa66ab55c2d2dc593c2a68325a6e6ebe5da485a5a', '0xa66ab55c2d2dc593c2a68325a6e6ebe5da485a5a', '0xa66ab55c2d2dc593c2a68325a6e6ebe5da485a5a']
            }
          ],
          bridgeHash: '',
          sourceChainId: 0,
          targetChainId: 0,
          amount: '',
          fee: 0,
          wallet: {
            account: '',
            chainId: 0,
            chainName: '(none)',
            name: 'Disconnected',
            valid: false
          }
        },
        methods: {
          walletAccountChanged: function (accounts) {
            console.log('wallet account changed:');
            console.log(accounts);
            if (accounts.length === 0) {
              this.walletDisconnected();
            } else {
              this.wallet.account = accounts[0];
            }
          },

          walletDisconnected: function () {
            console.warn('wallet disconnected.');
            this.wallet.account = null;
            this.wallet.chainId = 0;
            this.wallet.chainName = '(none)';
            this.wallet.name = 'Disconnected';
            this.wallet.valid = false;
          },

          walletChainChanged: function (chainId) {
            console.log('wallet chainId changed: ' + chainId + ' = ' + parseInt(chainId, 16));
            this.wallet.chainId = parseInt(chainId, 16);
            let chain = this.chains.filter(c => c.chainId === this.wallet.chainId)[0];
            this.wallet.chainName = chain ? chain.chainName : 'chain (' + this.wallet.chainId + ')';
            this.wallet.name = chain ? chain.name : 'Invalid Chain (' + this.wallet.chainId + ')';
            this.wallet.valid = chain ? true : false;
          },

          connectWallet: async function () {
            if (getWeb3Provider() === null) {
              return null;
            }
            try {
              let accounts = await window.ethereum.request({
                method: 'eth_requestAccounts',
              });
              this.walletAccountChanged(accounts);
              this.walletChainChanged(await window.ethereum.request({ method: 'eth_chainId' }))
              window.ethereum.on('disconnect', this.walletDisconnected);
              window.ethereum.on('accountsChanged', this.walletAccountChanged);
              window.ethereum.on('chainChanged', this.walletChainChanged);
            } catch (err) {
              console.error(err);
              this.showAlert('Could Not Connect Wallet', err.message || err.code);
            }
            return {
              installed: getWeb3Provider() !== null,
              web3Provider: getWeb3Provider(),
              account: null,
              chainId: ''
            }
          },

          crossTransfer: async function () {
            this.error = '';
            this.submitting = true;
            try {
              if (this.bridgeHash === '') {
                throw 'Please select a token.';
              }
              if (this.sourceChainId === 0) {
                throw 'Please select source chain.';
              }
              if (this.targetChainId === 0) {
                throw 'Please select source chain.';
              }
              if (this.amount.trim() === '') {
                throw 'Please enter amount.';
              }

              await this.connectWallet();

              if (this.sourceChainId !== this.wallet.chainId) {
                throw 'Please switch chain to ' + this.chains.filter(c => c.chainId === this.sourceChainId)[0].name + ' in MetaMask.';
              }
              let
                contract = loadContract('Bridge', window.addresses[this.wallet.chainName]['Bridge']),
                data = {
                  sourceToken: this.sourceToken.trim(),
                  sourceTx: this.sourceTx.trim(),
                  targetChainIds: targetChainIds,
                  targetTokens: targetTokens
                };

              console.log(JSON.stringify(data, null, '  '));
              // query transfer fee:
              let fee = await contract.fee();
              let tx = await contract.register(this.sourceToken.trim(),
                this.sourceTx.trim() !== '' ? this.sourceTx.trim() : '0x0000000000000000000000000000000000000000000000000000000000000000',
                targetChainIds,
                targetTokens
              );
              await tx.wait(1);
              console.log('transfer success!');
            } catch (err) {
              window.lastError = err;
              console.error(err);
              this.error = translateError(err);
            }
            this.submitting = false;
          }
        }
      });
    }
  </script>
</head>

<body>
  <!-- .app -->
  <div id="app" class="app has-fullwidth">
    <!--[if lt IE 10]>
      <div class="page-message" role="alert">You are using an <strong>outdated</strong> browser. Please <a class="alert-link" href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</div>
      <![endif]-->
    <!-- .app-header -->
    <header class="app-header app-header-dark">
      <!--#include file="inc_nav.html"-->
    </header><!-- /.app-header -->
    <!-- /.app-header -->
    <!-- .app-main -->
    <main class="app-main">
      <!-- .wrapper -->
      <div class="wrapper">
        <!-- .page -->
        <div class="page">
          <!-- .page-inner -->
          <div class="page-inner">
            <!-- .container -->
            <div class="container">
              <!-- .page-title-bar -->
              <header class="page-title-bar">
                <div class="d-flex flex-column flex-md-row">
                  <p class="lead">
                    <span class="font-weight-bold">Register Your ERC Token for Cross Chain</span>
                    <span class="d-block text-muted">Any ERC Token can be registered by its owner.</span>
                    <span class="d-block text-muted">Please read the <a target="_blank" href="#0">registration guide</a>
                      before register
                      tokens for cross
                      chain.</span>
                  </p>
                  <div class="ml-auto">
                  </div>
                </div>
              </header><!-- /.page-title-bar -->
              <!-- .page-section -->
              <div class="page-section">
                <!-- grid row -->
                <div class="row">
                  <!-- grid column -->
                  <div class="col-12">
                    <!-- .card -->
                    <div class="card card-fluid">
                      <form v-on:submit.prevent="crossTransfer">

                        <div class="card-body">
                          <h3 class="card-title mb-4">Transfer ERC Token for Cross Chain</h3>
                        </div>

                        <div class="card-body border-top mb-2">
                          <label>Select Token for Cross Transfer:</label>
                          <select v-model="bridgeHash" class="custom-select" required="">
                            <option value="">Select Token ...</option>
                            <option v-for="b in bridgeConfigs" v-bind:value="b.bridgeHash">{{ b.token }}</option>
                          </select>
                        </div>

                        <div class="card-body border-top">
                          <div class="row">
                            <div class="col-5">
                              <label>Source chain:</label>
                              <select v-model.number="sourceChainId" class="custom-select" required="">
                                <option value="0">From Chain ...</option>
                                <option v-for="c in chains" v-bind:value="c.chainId">{{ c.name }}</option>
                              </select>
                              <small class="form-text text-muted">Please collect your wallet to the selected
                                chain.</small>
                            </div>
                            <div class="col-2 text-center">
                              <label>&nbsp;</label>
                              <br>
                              <i class="oi oi-arrow-right"></i>
                            </div>
                            <div class="col-5">
                              <label>Target chain:</label>
                              <select v-model.number="targetChainId" class="custom-select" required="">
                                <option value="0">To Chain ...</option>
                                <option v-for="c in chains" v-bind:value="c.chainId">{{ c.name }}</option>
                              </select>
                            </div>
                          </div>
                        </div>

                        <div class="card-body border-top">
                          <div class="mb-2">
                            <label>Transfer Amount:</label>
                            <input v-model="amount" type="text" class="form-control" placeholder="Amount">
                            <small class="form-text text-muted">Estimated fee: <span>{{ fee }}</span></small>
                          </div>
                        </div>

                        <div class="card-body border-top">
                          <div v-show="error !== ''" class="alert alert-danger has-icon" role="alert">
                            <div class="alert-icon">
                              <span class="oi oi-warning"></span>
                            </div>
                            <p>{{ error }}</p>
                          </div>
                          <!-- .form-group -->
                          <div class="form-group mt-3">
                            <button class="btn btn-primary btn-lg btn-block" type="submit" v-bind:disabled="submitting">
                              <span v-show="submitting" class="spinner-border spinner-border-sm" role="status"></span>
                              Start Cross Transfer
                            </button>
                          </div><!-- /.form-group -->
                        </div>
                      </form>
                    </div>
                  </div><!-- /.card -->
                </div><!-- /grid column -->
              </div><!-- /grid row -->
            </div><!-- /.page-section -->
          </div><!-- /.container -->
        </div><!-- /.page-inner -->
      </div><!-- /.page -->
    </main>
  </div><!-- /.wrapper -->

  <!--#include file="inc_footer.html"-->

  </main><!-- /.app-main -->
  </div><!-- /.app -->
</body>

</html>